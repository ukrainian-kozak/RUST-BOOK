use std::{
    sync::{mpsc, Arc, Mutex},
    thread,
};

pub struct ThreadPool {
    workers: Vec<Worker>,
    sender: mpsc::Sender<Job>,
}

struct Job;

impl ThreadPool {
    pub fn build(size: usize) -> Result<ThreadPool, &'static str> {
        if size <= 0 {
            return Err("It cannot be less than 1")
        }

        let (sender, receiver) = mpsc::channel();

        let receiver = Arc::new(Mutex::new(receiver));
        
        let mut wokers = Vec::with_capacity(size);

        for id in 0..size {
            workers.push(Worker::new(id, Arc::clone(&receiver)));
        }

        Ok(ThreadPool { workers, sender })
    }

    pub fn execute<F>(&self, f: F)
    where
        F: FnOnce() + Send + 'static,
    {    
    }
}

struct Worker {
    id: usize,
    thread: thread::JoinHandle<()>
}

impl for Worker {
    pub new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {
        let thread =thread::spawn(|| {
            receiver;
        });

        Worker { id, thread }
    }
}
